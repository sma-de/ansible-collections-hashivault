---

  - set_fact:
      _cur_seccfg: >-
        {{ _iter_secrets.value.config | combine({'key': _iter_seckeys}) }}

  - name: read secret
    terryhowe.hashivault.hashivault_read: >-
      {{ _cur_seccfg }}
    no_log: True
    register: _tmp_modres
    failed_when: >-
      _tmp_modres.rc not in [0, 1]


  - name: assert that a secret was fetched succesfully
    ansible.builtin.assert:
      that:
        - _tmp_modres.rc == 0
        - _tmp_modres.value is defined
      fail_msg: >-
        Failed to read mandatory secret '{{ _cur_seccfg.secret }}:{{ _cur_seccfg.key }}'
        from eninge mountpoint '{{ _cur_seccfg.mount_point }}'. Assure that it exists
        and connection settings are correct. If this secret not being avaible is an
        acceptable and expectable outcome mark it as optional.
    when: not _iter_secrets.value.optional


    # update result var with new secret value
  - set_fact:
      smabot_hashivault_read_secrets: >-
        {{ smabot_hashivault_read_secrets
         | combine({
             _cur_seccfg.mount_point: {
                 _cur_seccfg.secret: {
                     _cur_seccfg.key: _tmp_modres.value
                 }
             }
           }, recursive=True, list_merge='append')
        }}
    no_log: True
    when: _tmp_modres.value is defined

