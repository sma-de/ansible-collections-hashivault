---

  - set_fact:
      _vault_env:
         VAULT_ADDR: >-
           {{ smabot_hashivault_config_instance_args_normed.server_url }}


  - set_fact:
      _vault_env: >-
        {{ _vault_env | combine({
             'VAULT_TOKEN': smabot_hashivault_init_state.key_setup.root_token
           })
        }}

    no_log: true
    when: smabot_hashivault_first_init


    ##
    ## on first time initial setup we use the root token for this
    ## part for authing, on any later runs we need to login here
    ## with an existing management user/approle
    ##
  - block:

          ##      - set_fact:
          ##          smabot_hashivault_login_args: >-
          ##            {{ smabot_hashivault_config_instance_args_normed.login }}

      - set_fact:
          _tmp_role_call_args: >-
            {{ smabot_hashivault_login_args | default({}, True)
             | combine(smabot_hashivault_config_instance_args_normed.login,
                 recursive=True, list_merge='append'
             ) }}

      - name: handle vault login
        ansible.builtin.include_role:
          name: smabot.hashivault.vault_login
        vars:
          smabot_hashivault_login_args: >-
            {{ _tmp_role_call_args }}

      - set_fact:
           _vault_env: >-
             {{ _vault_env | combine({'VAULT_TOKEN': smabot_hashivault_login_creds.token}) }}
        ##no_log: true

    when: not smabot_hashivault_first_init


  - set_fact:
      _approle_creds: {}


  - block:

      ##
      ## handle's all the stuff which must be configured so "user login"
      ## becomes possible like installing policies, enabling auth
      ## methods, etc.
      ##
      - include_tasks: config_pre_login.yml

    environment: "{{ _vault_env }}"


    ## login with possibly newly created vault manager approle,
    ## updates _vault_env with new credentials
  ##- include_tasks: login.yml

    ##  - set_fact:
    ##      smabot_hashivault_login_args: >-
    ##        {{ smabot_hashivault_config_instance_args_normed.login
    ##         | smabot.hashivault.change_login_method(
    ##             method='basic', params=_vaultman_creds
    ##           )
    ##        }}

  - name: handle vault login
    ansible.builtin.include_role:
      name: smabot.hashivault.vault_login
    vars:
      smabot_hashivault_login_args: >-
        {{ smabot_hashivault_config_instance_args_normed.login
         | smabot.hashivault.change_login_method(
             method='basic', params=_vaultman_creds
           )
        }}

  - set_fact:
       _vault_env: >-
         {{ _vault_env | combine({'VAULT_TOKEN': smabot_hashivault_login_creds.token}) }}
    ##no_log: true


  - block:

      ##
      ## note: we explicitly do this after login with "normal" approle
      ## creds, this leaves us more leeway for debugging in the case
      ## that login fails for some reason
      ##
      - name: revert / invalidate root token
        terryhowe.hashivault.hashivault_token_revoke:
          token: "{{ smabot_hashivault_init_state.key_setup.root_token }}"
        when: smabot_hashivault_first_init


      - include_tasks: config_post_login.yml

    environment: "{{ _vault_env }}"


  - set_fact:
      smabot_hashivault_config_inst_return:
        credentials:
          approle: "{{ _approle_creds }}"
    no_log: true

